[ { "title": "File Compress/Decompress Operations", "url": "/posts/file-compress-decompress-operations/", "categories": "Java", "tags": "java, file, io, compress, zip", "date": "2022-06-21 19:00:00 +0000", "snippet": "When we develop code with Java, we often work with files and different types of them.In general, we need compression operations to keep the file content intact and to reduce the file size. Although the compression process has different methods in Java, the current and my own methods are as follows.public static byte[] compress(byte[] input, String outputFileName) { try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); ZipOutputStream zipOut = new ZipOutputStream(byteArrayOutputStream)) { ZipEntry zipEntry = new ZipEntry(outputFileName); zipOut.putNextEntry(zipEntry); zipOut.write(input); zipOut.finish(); return byteArrayOutputStream.toByteArray(); } catch (IOException e) { log.error(\"Compress failed -&gt; {}\", ExceptionUtils.getStackTrace(e)); throw new CompressFileIOException(e); }}public static byte[] decompress(byte[] input) { byte[] result; try (ZipInputStream zis = new ZipInputStream(new ByteArrayInputStream(input)); ByteArrayOutputStream bos = new ByteArrayOutputStream()) { int len; byte[] buffer = new byte[1024]; ZipEntry zipEntry = zis.getNextEntry(); while (Objects.nonNull(zipEntry) &amp;&amp; (len = zis.read(buffer)) &gt; 0){ bos.write(buffer, 0, len); } result = bos.toByteArray(); } catch (IOException e) { log.error(\"Decompress failed -&gt; {}\", ExceptionUtils.getStackTrace(e)); throw new CompressFileIOException(e); } return result;}" }, { "title": "Useful Git Commands", "url": "/posts/useful-git-commands/", "categories": "Git", "tags": "git, version-control", "date": "2022-04-10 22:53:00 +0000", "snippet": "development is your working branch- git pull // gets last updates from your branch- git checkout BRANCH_NAME // changes your working branch- git checkout -D BRANCH_NAME // deletes your branch both in local and remote environments- git checkout -b development // creates a branch based on development- git switch -c BRANCH_NAME // switches your branch and your changes- git rebase development // updates your branch with your last changes of the based branch- git rebase --continue- git add FILE_NAME // adds your file to stage area- git commit -m \"YOUR_COMMENT\" // commit your file with YOUR_COMMENT- git revert commit_id -m 1- git log | grep commit_id- git stash- git stash pop- git stash apply- git reset --hard- git restore FILE_NAME- git restore --staged FILE_NAME" } ]
